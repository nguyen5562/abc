// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopPet.Repository;

#nullable disable

namespace ShopPet.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231106085924_DB")]
    partial class DB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles", (string)null);
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens", (string)null);
            });

            modelBuilder.Entity("ShopPet.Models.AppUserModel", b =>
            {
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("DiaChi")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("GioiTinh")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<DateTime>("NgaySinh")
                    .HasColumnType("datetime2");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("TaiKhoan")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers", (string)null);
            });

            modelBuilder.Entity("ShopPet.Models.ChiTietHoaDon", b =>
            {
                b.Property<int>("MaCT")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaCT"));

                b.Property<int>("HoaDonId")
                    .HasColumnType("int");

                b.Property<string>("OrderCode")
                    .HasColumnType("nvarchar(max)");

                b.Property<decimal>("Price")
                    .HasColumnType("decimal(18,2)");

                b.Property<int>("Quantity")
                    .HasColumnType("int");

                b.Property<int>("SanPhamId")
                    .HasColumnType("int");

                b.Property<string>("UserName")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("MaCT");

                b.HasIndex("HoaDonId");

                b.HasIndex("SanPhamId");

                b.ToTable("ChiTietHoaDons");
            });

            modelBuilder.Entity("ShopPet.Models.HoaDon", b =>
            {
                b.Property<int>("MaHD")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaHD"));

                b.Property<string>("DiaChi")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("NgayTao")
                    .HasColumnType("datetime2");

                b.Property<string>("Note")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("OrderCode")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SĐT")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("TrangThai")
                    .HasColumnType("int");

                b.Property<string>("UserName")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("MaHD");

                b.ToTable("HoaDons");
            });

            modelBuilder.Entity("ShopPet.Models.LoaiSanPham", b =>
            {
                b.Property<int>("MaLoaiSP")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaLoaiSP"));

                b.Property<string>("TenLoaiSP")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("MaLoaiSP");

                b.ToTable("LoaiSanPhams");
            });

            modelBuilder.Entity("ShopPet.Models.NhaCungCap", b =>
            {
                b.Property<int>("MaNCC")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaNCC"));

                b.Property<string>("DiaChi")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SĐT")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("TenNCC")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("MaNCC");

                b.ToTable("nhaCungCaps");
            });

            modelBuilder.Entity("ShopPet.Models.SanPham", b =>
            {
                b.Property<int>("MaSP")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaSP"));

                b.Property<string>("Anh")
                    .HasColumnType("nvarchar(max)");

                b.Property<decimal>("GiaBan")
                    .HasColumnType("decimal(18,2)");

                b.Property<decimal>("GiaNhap")
                    .HasColumnType("decimal(18,2)");

                b.Property<string>("GiongLoai")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("LoaiSanPhamId")
                    .HasColumnType("int");

                b.Property<string>("MoTa")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("NhaCungCapId")
                    .HasColumnType("int");

                b.Property<int>("SoLuongTon")
                    .HasColumnType("int");

                b.Property<string>("TenSP")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("MaSP");

                b.HasIndex("LoaiSanPhamId");

                b.HasIndex("NhaCungCapId");

                b.ToTable("SanPhams");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("ShopPet.Models.AppUserModel", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("ShopPet.Models.AppUserModel", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("ShopPet.Models.AppUserModel", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("ShopPet.Models.AppUserModel", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("ShopPet.Models.ChiTietHoaDon", b =>
            {
                b.HasOne("ShopPet.Models.HoaDon", "HoaDon")
                    .WithMany("ChiTietHoaDons")
                    .HasForeignKey("HoaDonId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("ShopPet.Models.SanPham", "SanPham")
                    .WithMany("ChiTietHoaDons")
                    .HasForeignKey("SanPhamId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("HoaDon");

                b.Navigation("SanPham");
            });

            modelBuilder.Entity("ShopPet.Models.SanPham", b =>
            {
                b.HasOne("ShopPet.Models.LoaiSanPham", "LoaiSanPham")
                    .WithMany("SanPhams")
                    .HasForeignKey("LoaiSanPhamId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("ShopPet.Models.NhaCungCap", "NhaCungCap")
                    .WithMany()
                    .HasForeignKey("NhaCungCapId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("LoaiSanPham");

                b.Navigation("NhaCungCap");
            });

            modelBuilder.Entity("ShopPet.Models.HoaDon", b =>
            {
                b.Navigation("ChiTietHoaDons");
            });

            modelBuilder.Entity("ShopPet.Models.LoaiSanPham", b =>
            {
                b.Navigation("SanPhams");
            });

            modelBuilder.Entity("ShopPet.Models.SanPham", b =>
            {
                b.Navigation("ChiTietHoaDons");
            });
#pragma warning restore 612, 618
        }
    }
}